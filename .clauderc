{
  "model": "claude-3-opus",
  "rules": [
    "MODULAR AND REUSABLE FUNCTIONS:",
    "- Write functions that perform one clear task, adhering to the single responsibility principle",
    "- Reuse functions or classes wherever possible to avoid code duplication",
    "- Group related functions together by encapsulating them in dedicated classes or modules",
    "- Create specific manager classes (e.g., DatabaseManager for database/cursor handling, ConfigManager for configuration and path management)",
    "- Organize code into distinct modules (e.g., separate modules for database operations and configuration management)",
    "- Provide a clear, high-level overview of the system through modular organization",
    
    "FOCUSED BUG FIXING:",
    "- When editing or fixing bugs, concentrate solely on the core issue at hand",
    "- Avoid unnecessary changes that might introduce side effects",
    "- Ensure each modification is both isolated and testable",
    "- Make minimized changes that address only the specific problem",
    
    "GLOBAL PATH MANAGEMENT:",
    "- Define all global paths in a single, easily identifiable configuration module",
    "- Use the script's location (via __file__) to set paths instead of relying on current working directory (CWD)",
    "- Ensure paths remain consistent regardless of the script's execution context",
    "- Implement robust path setting mechanisms",
    
    "ENHANCED CODE ORGANIZATION:",
    "- Use classes to manage specific aspects of the application",
    "- Encapsulate cursor handling, database interactions, and configuration tasks in dedicated classes",
    "- Ensure each module or class has a well-defined purpose",
    "- Maintain clear separation of concerns",
    "- Structure codebase for easy overview accessibility",
    "- Use clear module boundaries and well-named classes and functions",
    "- Facilitate rapid onboarding and troubleshooting through good organization",
    
    "FILE CREATION GUIDELINES:",
    "- NEVER create test files (test.py, test_*.py, *_test.py) unless explicitly requested by the user",
    "- Avoid creating example or demo scripts unless specifically asked",
    "- Focus on modifying existing code rather than creating new files",
    "- Only create new files when necessary for the core functionality requested"
  ],
  "memory": {
    "project_context": "Following strict modular architecture principles with emphasis on single responsibility and reusability",
    "coding_standards": "Class-based organization with dedicated managers for different concerns (Database, Config, etc.)",
    "path_management": "All paths defined centrally using __file__ location, not CWD",
    "bug_fixing_approach": "Minimal, focused changes that address core issues without side effects"
  },
  "preferences": {
    "code_style": "modular_class_based",
    "organization_pattern": "manager_classes",
    "path_strategy": "script_location_based",
    "change_philosophy": "minimal_focused_modifications"
  }
}